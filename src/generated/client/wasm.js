
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  avatar: 'avatar',
  stakingPower: 'stakingPower',
  reputation: 'reputation',
  tier: 'tier',
  following: 'following',
  followers: 'followers',
  totalTipsGiven: 'totalTipsGiven',
  totalCommentsPosted: 'totalCommentsPosted',
  dailyMissionsCompleted: 'dailyMissionsCompleted',
  streakDays: 'streakDays',
  wallet: 'wallet'
};

exports.Prisma.ArtistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  bio: 'bio',
  image: 'image',
  stakingPower: 'stakingPower',
  totalTips: 'totalTips',
  rank: 'rank',
  genre: 'genre'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  artistId: 'artistId',
  donorId: 'donorId',
  amount: 'amount',
  message: 'message',
  timestamp: 'timestamp',
  stakingPower: 'stakingPower'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  artistId: 'artistId',
  userId: 'userId',
  username: 'username',
  message: 'message',
  timestamp: 'timestamp',
  likes: 'likes',
  avatar: 'avatar'
};

exports.Prisma.ActivityFeedItemScalarFieldEnum = {
  id: 'id',
  type: 'type',
  userId: 'userId',
  artistId: 'artistId',
  artistName: 'artistName',
  amount: 'amount',
  message: 'message',
  timestamp: 'timestamp',
  icon: 'icon'
};

exports.Prisma.DailyMissionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  reward: 'reward',
  type: 'type',
  target: 'target',
  progress: 'progress',
  completed: 'completed',
  icon: 'icon'
};

exports.Prisma.NFTRewardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rarity: 'rarity',
  image: 'image',
  earnedAt: 'earnedAt',
  userId: 'userId',
  seasonId: 'seasonId'
};

exports.Prisma.SeasonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  tipMultiplier: 'tipMultiplier',
  isActive: 'isActive'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  rarity: 'rarity',
  unlocked: 'unlocked',
  unlockDate: 'unlockDate',
  unlockCondition: 'unlockCondition',
  xpReward: 'xpReward'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  rarity: 'rarity',
  unlocked: 'unlocked',
  unlockDate: 'unlockDate',
  unlockCondition: 'unlockCondition',
  xpReward: 'xpReward',
  category: 'category',
  progress: 'progress',
  target: 'target',
  rewardType: 'rewardType'
};

exports.Prisma.TemporaryEventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  rewards: 'rewards',
  missions: 'missions',
  leaderboard: 'leaderboard'
};

exports.Prisma.ReputationScalarFieldEnum = {
  id: 'id',
  level: 'level',
  xp: 'xp',
  xpToNextLevel: 'xpToNextLevel',
  title: 'title',
  badge: 'badge',
  benefits: 'benefits'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserTier = exports.$Enums.UserTier = {
  CYBER_NOVICE: 'CYBER_NOVICE',
  DIGITAL_REBEL: 'DIGITAL_REBEL',
  CYBER_PATRON: 'CYBER_PATRON',
  NEURAL_LEGEND: 'NEURAL_LEGEND'
};

exports.FeedType = exports.$Enums.FeedType = {
  tip: 'tip',
  comment: 'comment',
  follow: 'follow',
  achievement: 'achievement',
  mission: 'mission'
};

exports.MissionType = exports.$Enums.MissionType = {
  tip: 'tip',
  comment: 'comment',
  follow: 'follow',
  login: 'login'
};

exports.Rarity = exports.$Enums.Rarity = {
  common: 'common',
  rare: 'rare',
  epic: 'epic',
  legendary: 'legendary'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  social: 'social',
  tipping: 'tipping',
  engagement: 'engagement',
  milestone: 'milestone'
};

exports.RewardType = exports.$Enums.RewardType = {
  xp: 'xp',
  sp: 'sp',
  badge: 'badge',
  nft: 'nft'
};

exports.Prisma.ModelName = {
  User: 'User',
  Artist: 'Artist',
  Donation: 'Donation',
  Comment: 'Comment',
  ActivityFeedItem: 'ActivityFeedItem',
  DailyMission: 'DailyMission',
  NFTReward: 'NFTReward',
  Season: 'Season',
  Badge: 'Badge',
  Achievement: 'Achievement',
  TemporaryEvent: 'TemporaryEvent',
  Reputation: 'Reputation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
